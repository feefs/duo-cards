[{"/Users/feefs/Documents/ts-duo-cards/src/App.tsx":"1","/Users/feefs/Documents/ts-duo-cards/src/index.tsx":"2","/Users/feefs/Documents/ts-duo-cards/src/reportWebVitals.ts":"3","/Users/feefs/Documents/ts-duo-cards/src/components/Home.tsx":"4","/Users/feefs/Documents/ts-duo-cards/src/components/Header.tsx":"5","/Users/feefs/Documents/ts-duo-cards/src/ts/firebase-config.ts":"6","/Users/feefs/Documents/ts-duo-cards/src/components/View.tsx":"7","/Users/feefs/Documents/ts-duo-cards/src/components/Create.tsx":"8","/Users/feefs/Documents/ts-duo-cards/src/components/SlideEditor.tsx":"9","/Users/feefs/Documents/ts-duo-cards/src/components/Edit.tsx":"10","/Users/feefs/Documents/ts-duo-cards/src/components/Practice.tsx":"11","/Users/feefs/Documents/ts-duo-cards/src/ts/curated.ts":"12"},{"size":1177,"mtime":1610262989969,"results":"13","hashOfConfig":"14"},{"size":506,"mtime":1609890559342,"results":"15","hashOfConfig":"14"},{"size":425,"mtime":1609751238936,"results":"16","hashOfConfig":"14"},{"size":2962,"mtime":1610337325713,"results":"17","hashOfConfig":"14"},{"size":1867,"mtime":1610325398368,"results":"18","hashOfConfig":"14"},{"size":345,"mtime":1610262981073,"results":"19","hashOfConfig":"14"},{"size":2923,"mtime":1610330920158,"results":"20","hashOfConfig":"14"},{"size":2293,"mtime":1610337249050,"results":"21","hashOfConfig":"14"},{"size":4814,"mtime":1610347629494,"results":"22","hashOfConfig":"14"},{"size":1450,"mtime":1610331400624,"results":"23","hashOfConfig":"14"},{"size":4137,"mtime":1610330266168,"results":"24","hashOfConfig":"14"},{"size":769,"mtime":1610325347640,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1lydpe5",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/feefs/Documents/ts-duo-cards/src/App.tsx",[],["56","57"],"/Users/feefs/Documents/ts-duo-cards/src/index.tsx",[],["58","59"],"/Users/feefs/Documents/ts-duo-cards/src/reportWebVitals.ts",[],["60","61"],"/Users/feefs/Documents/ts-duo-cards/src/components/Home.tsx",["62"],"/Users/feefs/Documents/ts-duo-cards/src/components/Header.tsx",[],"/Users/feefs/Documents/ts-duo-cards/src/ts/firebase-config.ts",[],"/Users/feefs/Documents/ts-duo-cards/src/components/View.tsx",["63"],"import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { auth, db } from '../App';\n\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport firebase from 'firebase/app'\n\n// Types\nimport { DeckSchema, CardSchema, MatchProps, HistType } from '../ts/interfaces';\n\nfunction View(match: MatchProps) {\n  const[user] = useAuthState(auth);\n  const [data, setData] = useState<DeckSchema>({\n    cards: [],\n    created: null,\n    creator_uid: \"\",\n    name: \"\"\n  })\n\n  const deckID = match.match.params.id\n  \n  const fetchCards = async () => {\n    if (!user) {\n        return\n    }\n\n    const deck = db.collection('decks').doc(deckID)\n    const doc = await deck.get()\n    const d = doc.data() as DeckSchema\n\n    if (!d || !user || d.creator_uid !== user.uid) {\n        return\n    }\n\n    setData(d)\n  }\n\n  useEffect(() => {\n      fetchCards()\n  }, [user])\n\n  const cardlist = data.cards.map((c: CardSchema) => {\n    return (\n      <div key={c.id} className=\"card-preview\">\n          <div></div>\n          <div>{c.ja}</div>\n          <div>{c.pronunciation}</div>\n          <div>{c.en}</div>\n          <div>{c.pos}</div>\n          <div></div>\n      </div>\n    )\n  })\n\n  return (\n    <div className=\"view-body\">\n        <div className=\"cards\">{cardlist}</div>\n        <Actions deckID={deckID} />\n        <Stats data={data} />\n    </div>\n  )\n}\n\nfunction Actions(props: {deckID: string}) {\n  const history: HistType = useHistory()\n\n  const practiceDeck = (id: string) => {\n    setTimeout(() => history.push(`/duo-cards/practice/${id}`), 100)\n  }\n\n  const editDeck = (id: string) => {\n    setTimeout(() => history.push(`/duo-cards/edit/${id}`), 100)\n  }\n\n  return (\n    <div className=\"actions\">\n      <button className=\"practice-deck\" onClick={() => {practiceDeck(props.deckID)}}>Practice</button>\n      <button className=\"edit-deck\" onClick={() => {editDeck(props.deckID)}}>Edit Deck</button>\n    </div>\n  )\n}\n\nfunction Stats(props: {data: DeckSchema}) {\n  const formatTimestamp = (timestamp: firebase.firestore.Timestamp | undefined) => {\n    if (!timestamp) return \"Never\"\n    const d = timestamp.toDate() as Date\n    return `${d.toLocaleDateString()} ${d.toLocaleTimeString()}`\n  }\n\n  const stats = (\n    props.data.created ? \n    <div className=\"stats\">\n      <div>\n        <div>{props.data.name}</div>\n        <div></div>\n      </div>\n      <div>\n        <div># of cards:</div>\n        <div>{props.data.cards.length}</div>\n      </div>\n      <div>\n        <div>Last practiced:</div>\n        <div>{formatTimestamp(props.data.last_practiced)}</div>\n      </div>\n      <div>\n        <div>Last edited:</div>\n        <div>{formatTimestamp(props.data.last_edited)}</div>\n      </div>\n      <div>\n        <div>Time created:</div>\n        <div>{formatTimestamp(props.data.created)}</div>\n      </div>\n    </div>\n    : <div className=\"stats\"></div>\n  )\n\n  return stats\n}\n\nexport default View\n","/Users/feefs/Documents/ts-duo-cards/src/components/Create.tsx",["64"],"import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { auth } from '../App';\nimport SlideEditor from './SlideEditor';\n\nimport { useAuthState } from 'react-firebase-hooks/auth'\n\n// Types\nimport { CardSchema, LocType } from '../ts/interfaces';\n\nfunction Create() {\n  const[user] = useAuthState(auth);\n  const [deckName, setDeckName] = useState<string>(\"\")\n  const [cardlist, setCardlist] = useState<CardSchema[]>([])\n  const [ID, setID] = useState<number>(0)\n\n  const fetchCards = async (parameters: string, numCards: number, name: string) => {\n    let cards: CardSchema[] = []\n\n    if (parameters) {  \n      const words = await fetch(\"http://127.0.0.1:5000/query\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: parameters\n        }).then(response => response.json())\n      \n      words.shift()\n\n      const shuffled = words.sort(() => 0.5 - Math.random()).slice(0, Math.min(words.length, numCards))\n      const translateWords = shuffled.map((word: { [x: string]: string; }) => word['word_string'] )\n      const translateParams = JSON.stringify({ word_list: translateWords })\n  \n      cards = await fetch(\"http://127.0.0.1:5000/translate\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: translateParams\n        }).then(response => response.json())\n      \n      for (let i = 0; i < shuffled.length; i++) {\n        cards[i].id = i\n      }\n\n      setDeckName(name)\n      setID(shuffled.length)\n    }\n\n    if (cards.length === 0) {\n      cards.push({ja: \"\", pronunciation: \"\", en: \"\", pos: \"\", id: 0})\n      setID(1)\n    }\n\n    setCardlist(cards)\n  }\n\n  const data: LocType = useLocation()\n  let name: string\n  let params: string\n  let numCards: number\n  if (data.state) {\n    name = data.state.name\n    params = data.state.curateParameters\n    numCards = data.state.numCards\n  }\n\n  useEffect(() => {\n    fetchCards(params, numCards, name)\n  }, [])\n\n  return (\n    <div className=\"create-body\">\n      <SlideEditor\n        user={user}\n        deckName={deckName}\n        setDeckName={setDeckName}\n        cards={cardlist}\n        setCards={setCardlist}\n        ID={ID}\n        setID={setID}\n      />\n    </div>\n  )\n}\n\nexport default Create\n","/Users/feefs/Documents/ts-duo-cards/src/components/SlideEditor.tsx",["65"],"import { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { db } from '../App';\n\nimport firebase from 'firebase/app'\n\n// Types\nimport { CardSchema, SlideEditorProps, CardProps, HistType } from '../ts/interfaces';\n\nfunction SlideEditor(props: SlideEditorProps) {\n  const [currentIndex, setCurrentIndex] = useState<number>(0)\n  const [submitted, setSubmitted] = useState<boolean>(false)\n  const [deleted, setDeleted] = useState<boolean>(false)\n  const history: HistType = useHistory()\n\n  if (props.cards.length === 0) {\n    return <div>Loading...</div>\n  }\n\n  const prev = () => { if (currentIndex > 0) setCurrentIndex(currentIndex - 1) }\n  const next = () => { if (currentIndex < props.cards.length - 1) setCurrentIndex(currentIndex + 1) }\n\n  const deepCopy = () => {\n    return props.cards.map((c: CardSchema) => JSON.parse(JSON.stringify(c)))\n  }\n\n  const updateCard = (index: number, field: string, value: string) => {\n    const dc = deepCopy()\n    dc[index][field] = value\n    props.setCards(dc)\n  }\n\n  const newCard = () => {\n    const dc = deepCopy()\n    dc.splice(currentIndex + 1, 0, {})\n    props.setCards(dc)\n    setTimeout(() => setCurrentIndex(currentIndex + 1), 100)\n  }\n\n  const deleteCard = () => {\n    if (props.cards.length > 1) {\n      const dc = deepCopy()\n      dc.splice(currentIndex, 1)\n      props.setCards(dc)\n      if (currentIndex === dc.length) {\n        setTimeout(() => setCurrentIndex(currentIndex - 1), 100)\n      }\n    }\n  }\n\n  const wipeCard = () => {\n    const dc = deepCopy()\n    const dcc = dc[currentIndex]\n    dcc.ja = \"\"\n    dcc.pronunciation = \"\"\n    dcc.en = \"\"\n    dcc.pos = \"\"\n    props.setCards(dc)\n  }\n\n  const submitDeck = async () => {\n    if (submitted) { return }\n\n    setSubmitted(true)\n\n    if (props.deckID) {\n      await db.collection('decks').doc(props.deckID).update({\n        name: props.deckName,\n        cards: deepCopy(),\n        last_edited: firebase.firestore.Timestamp.now()\n      })\n    } else {\n      await db.collection('decks').add({\n        creator_uid: props.user.uid,\n        name: props.deckName,\n        cards: deepCopy(),\n        created: firebase.firestore.Timestamp.now(),\n      })\n    }\n\n    if (props.ret) {\n      history.goBack()\n    } else {\n      history.push('/duo-cards')\n    }\n  }\n\n  const deleteDeck = async () => {\n    await db.collection('decks').doc(props.deckID).delete()\n    history.push('/duo-cards')\n  }\n\n  const slides = props.cards.map((c: CardSchema, index: number) => {\n      if (!c.hasOwnProperty('id')) {\n        c['id'] = props.ID\n        props.setID(props.ID + 1)\n      }\n      return (\n        <div key={c['id']} className={index === currentIndex ? \"slide active\" : \"slide\"}\n            style={{transform: `translateX(${((currentIndex - index) * -10) + 20}vmin)`}}>\n          <Card cardData={c} \n            setJa={(v: string) => updateCard(index, 'ja', v)}\n            setPronunciation={(v: string) => updateCard(index, 'pronunciation', v)}\n            setEn={(v: string) => updateCard(index, 'en', v)}\n            setPos={(v: string) => updateCard(index, 'pos', v)}\n            />\n        </div>\n      )\n    }\n  )\n\n  return (\n    <div className=\"editor\">\n      <button className=\"nav-button previous\" onClick={prev}>Left</button>\n      <button className=\"nav-button next\" onClick={next}>Right</button>\n      <input className=\"name\" value={props.deckName} placeholder=\"deck name\" onChange={e => props.setDeckName(e.target.value)} />\n      <div className=\"slider\">\n        {slides}\n      </div>\n      <button className=\"new-card\" onClick={newCard}>+</button>\n      <button className=\"delete-card\" onClick={deleteCard}>x</button>\n      <button className=\"wipe-card\" onClick={wipeCard}>🧹</button>\n      <button\n        className={props.user && !submitted && props.deckName ? \"submit-deck\" : \"submit-deck disabled\"}\n        onClick={props.user && !submitted && props.deckName ? submitDeck : () => {}}\n      >✓</button>\n      {props.deckID ?\n        <button\n          className={props.user && !deleted ? \"delete-deck\" : \"delete-deck disabled\"}\n          onClick={props.user && !deleted ? deleteDeck : () => {}}\n        >\n          Delete Deck\n        </button> : null}\n    </div>\n  )\n}\n\nfunction Card(props: CardProps) {\n  return (\n    <div className=\"card\">\n      <div></div>\n      <input value={props.cardData.ja} placeholder=\"ja\" onChange={e => props.setJa(e.target.value)} />\n      <input value={props.cardData.pronunciation} placeholder=\"romaji\" onChange={e => props.setPronunciation(e.target.value)} />\n      <input value={props.cardData.en} placeholder=\"en\" onChange={e => props.setEn(e.target.value)} />\n      <input value={props.cardData.pos} placeholder=\"grammar\" onChange={e => props.setPos(e.target.value)} />\n      <div></div>\n    </div>\n  )\n}\n\nexport default SlideEditor\n","/Users/feefs/Documents/ts-duo-cards/src/components/Edit.tsx",["66"],"/Users/feefs/Documents/ts-duo-cards/src/components/Practice.tsx",["67"],"/Users/feefs/Documents/ts-duo-cards/src/ts/curated.ts",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"68","replacedBy":"72"},{"ruleId":"70","replacedBy":"73"},{"ruleId":"68","replacedBy":"74"},{"ruleId":"70","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":56,"column":6,"nodeType":"78","endLine":56,"endColumn":18,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":40,"column":6,"nodeType":"78","endLine":40,"endColumn":12,"suggestions":"81"},{"ruleId":"76","severity":1,"message":"82","line":67,"column":6,"nodeType":"78","endLine":67,"endColumn":8,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":13,"column":19,"nodeType":"86","messageId":"87","endLine":13,"endColumn":29},{"ruleId":"76","severity":1,"message":"80","line":46,"column":6,"nodeType":"78","endLine":46,"endColumn":8,"suggestions":"88"},{"ruleId":"76","severity":1,"message":"80","line":54,"column":6,"nodeType":"78","endLine":54,"endColumn":12,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],["90"],["91"],["90"],["91"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchDecks'. Either include it or remove the dependency array.","ArrayExpression",["92"],"React Hook useEffect has a missing dependency: 'fetchCards'. Either include it or remove the dependency array.",["93"],"React Hook useEffect has missing dependencies: 'name', 'numCards', and 'params'. Either include them or remove the dependency array.",["94"],"@typescript-eslint/no-unused-vars","'setDeleted' is assigned a value but never used.","Identifier","unusedVar",["95"],["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"99","fix":"105"},"Update the dependencies array to be: [fetchDecks, props.user]",{"range":"106","text":"107"},"Update the dependencies array to be: [fetchCards, user]",{"range":"108","text":"109"},"Update the dependencies array to be: [name, numCards, params]",{"range":"110","text":"111"},"Update the dependencies array to be: [fetchCards]",{"range":"112","text":"113"},{"range":"114","text":"109"},[1429,1441],"[fetchDecks, props.user]",[887,893],"[fetchCards, user]",[1999,2001],"[name, numCards, params]",[1115,1117],"[fetchCards]",[1183,1189]]