[{"/Users/feefs/Documents/ts-duo-cards/src/App.tsx":"1","/Users/feefs/Documents/ts-duo-cards/src/index.tsx":"2","/Users/feefs/Documents/ts-duo-cards/src/reportWebVitals.ts":"3","/Users/feefs/Documents/ts-duo-cards/src/components/Home.tsx":"4","/Users/feefs/Documents/ts-duo-cards/src/components/Header.tsx":"5","/Users/feefs/Documents/ts-duo-cards/src/components/View.tsx":"6","/Users/feefs/Documents/ts-duo-cards/src/components/Create.tsx":"7","/Users/feefs/Documents/ts-duo-cards/src/components/SlideEditor.tsx":"8","/Users/feefs/Documents/ts-duo-cards/src/components/Edit.tsx":"9","/Users/feefs/Documents/ts-duo-cards/src/components/Practice.tsx":"10","/Users/feefs/Documents/ts-duo-cards/src/ts/curated.ts":"11","/Users/feefs/Documents/ts-duo-cards/src/ts/configs.ts":"12"},{"size":1194,"mtime":1610601938225,"results":"13","hashOfConfig":"14"},{"size":506,"mtime":1609890559342,"results":"15","hashOfConfig":"14"},{"size":425,"mtime":1609751238936,"results":"16","hashOfConfig":"14"},{"size":3878,"mtime":1610606639597,"results":"17","hashOfConfig":"14"},{"size":2122,"mtime":1610608966920,"results":"18","hashOfConfig":"14"},{"size":2956,"mtime":1610529957906,"results":"19","hashOfConfig":"14"},{"size":2625,"mtime":1610601933728,"results":"20","hashOfConfig":"14"},{"size":6651,"mtime":1610531251103,"results":"21","hashOfConfig":"14"},{"size":1501,"mtime":1610486618894,"results":"22","hashOfConfig":"14"},{"size":4305,"mtime":1610521864479,"results":"23","hashOfConfig":"14"},{"size":1254,"mtime":1610606262257,"results":"24","hashOfConfig":"14"},{"size":376,"mtime":1610605677426,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1lydpe5",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/feefs/Documents/ts-duo-cards/src/App.tsx",[],["55","56"],"/Users/feefs/Documents/ts-duo-cards/src/index.tsx",[],["57","58"],"/Users/feefs/Documents/ts-duo-cards/src/reportWebVitals.ts",[],["59","60"],"/Users/feefs/Documents/ts-duo-cards/src/components/Home.tsx",[],"/Users/feefs/Documents/ts-duo-cards/src/components/Header.tsx",[],"/Users/feefs/Documents/ts-duo-cards/src/components/View.tsx",[],["61","62"],"/Users/feefs/Documents/ts-duo-cards/src/components/Create.tsx",[],"/Users/feefs/Documents/ts-duo-cards/src/components/SlideEditor.tsx",["63"],"import { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { db } from '../App';\n\nimport firebase from 'firebase/app'\n\n// Types\nimport { CardSchema, SlideEditorProps, CardProps, HistType } from '../ts/interfaces';\n\nfunction SlideEditor(props: SlideEditorProps) {\n  const [currentIndex, setCurrentIndex] = useState<number>(0)\n  const [submitted, setSubmitted] = useState<boolean>(false)\n  const [deleted, setDeleted] = useState<boolean>(false)\n  const history: HistType = useHistory()\n\n  if (props.cardlist.length === 0) {\n    return <div>Loading...</div>\n  }\n\n  const prev = () => { if (currentIndex > 0) setCurrentIndex(currentIndex - 1) }\n  const next = () => { if (currentIndex < props.cardlist.length - 1) setCurrentIndex(currentIndex + 1) }\n\n  const deepCopy = () => {\n    return props.cardlist.map((card: CardSchema) => JSON.parse(JSON.stringify(card)))\n  }\n\n  const updateCard = (index: number, field: string, value: string) => {\n    const dc = deepCopy()\n    dc[index][field] = value\n    props.setCardlist(dc)\n  }\n\n  const newCard = () => {\n    const dc = deepCopy()\n    dc.splice(currentIndex + 1, 0, {})\n    props.setCardlist(dc)\n    setTimeout(() => setCurrentIndex(currentIndex + 1), 100)\n  }\n\n  const deleteCard = () => {\n    if (props.cardlist.length > 1) {\n      const dc = deepCopy()\n      dc.splice(currentIndex, 1)\n      props.setCardlist(dc)\n      if (currentIndex === dc.length) {\n        setTimeout(() => setCurrentIndex(currentIndex - 1), 100)\n      }\n    }\n  }\n\n  const wipeCard = () => {\n    const dc = deepCopy()\n    const dcc = dc[currentIndex]\n    dcc.ja = \"\"\n    dcc.pronunciation = \"\"\n    dcc.en = \"\"\n    dcc.pos = \"\"\n    props.setCardlist(dc)\n  }\n\n  const submitDeck = async () => {\n    if (submitted) { return }\n\n    setSubmitted(true)\n\n    const processedDeck = deepCopy()\n    processedDeck.forEach((card: any) => {\n      if (card.metadata) {\n        delete card.metadata\n      }\n      if (card.defs) {\n        delete card.defs\n      }\n    });\n\n    if (props.deckID) {\n      await db.collection('decks').doc(props.deckID).update({\n        name: props.deckName,\n        cards: processedDeck,\n        last_edited: firebase.firestore.Timestamp.now()\n      })\n    } else {\n      await db.collection('decks').add({\n        creator_uid: props.user.uid,\n        name: props.deckName,\n        cards: processedDeck,\n        created: firebase.firestore.Timestamp.now(),\n      })\n    }\n\n    if (props.deckID) {\n      history.goBack()\n    } else {\n      history.push('/duo-cards')\n    }\n  }\n\n  const deleteDeck = async () => {\n    if (deleted) { return }\n\n    setDeleted(true)\n\n    await db.collection('decks').doc(props.deckID).delete()\n    history.push('/duo-cards')\n  }\n\n  const slides = props.cardlist.map((card: CardSchema, index: number) => {\n      if (!card.hasOwnProperty('id')) {\n        card.id = props.cardID\n        props.setCardID(props.cardID + 1)\n      }\n      return (\n        <div key={card.id} className={index === currentIndex ? \"slide active\" : \"slide\"}\n            style={{transform: `translateX(${((currentIndex - index) * -10) + 20}vmin)`}}>\n          <Card cardData={card} \n            setJa={(v: string) => updateCard(index, 'ja', v)}\n            setPronunciation={(v: string) => updateCard(index, 'pronunciation', v)}\n            setEn={(v: string) => updateCard(index, 'en', v)}\n            setPos={(v: string) => updateCard(index, 'pos', v)}\n            />\n          {card.metadata ? <Metadata data={card.metadata} defs={card.defs} /> : null}\n        </div>\n      )\n    }\n  )\n\n  return (\n    <div className=\"editor\">\n      <input className=\"name\" value={props.deckName} placeholder=\"deck name\" onChange={e => props.setDeckName(e.target.value)} />\n      <div className=\"slider\">{slides}</div>\n      <button className=\"nav-button previous\" onClick={prev}>Left</button>\n      <button className=\"nav-button next\" onClick={next}>Right</button>\n      <button className=\"new-card\" onClick={newCard}>+</button>\n      <button className=\"delete-card\" onClick={deleteCard}>x</button>\n      <button className=\"wipe-card\" onClick={wipeCard}>ðŸ§¹</button>\n      <button\n        className={props.user && !submitted && props.deckName ? \"submit-deck\" : \"submit-deck disabled\"}\n        onClick={props.user && !submitted && props.deckName ? submitDeck : () => {}}\n      >âœ“</button>\n      {props.deckID ?\n        <button\n          className={props.user && !deleted ? \"delete-deck\" : \"delete-deck disabled\"}\n          onClick={props.user && !deleted ? deleteDeck : () => {}}\n        >Delete Deck</button>\n        : null\n      }\n    </div>\n  )\n}\n\nfunction Card(props: CardProps) {\n  return (\n    <div className=\"card\">\n      <div></div>\n      <input value={props.cardData.ja} placeholder=\"ja\" onChange={e => props.setJa(e.target.value)} />\n      <input value={props.cardData.pronunciation} placeholder=\"romaji\" onChange={e => props.setPronunciation(e.target.value)} />\n      <input value={props.cardData.en} placeholder=\"en\" onChange={e => props.setEn(e.target.value)} />\n      <input value={props.cardData.pos} placeholder=\"grammar\" onChange={e => props.setPos(e.target.value)} />\n      <div></div>\n    </div>\n  )\n}\n\nfunction Metadata(props: {data: any, defs: any}) {\n  const [similar, setSimilar] = useState<any[]>([])\n\n  useEffect(() => {\n    const similarDivs: any[] = []\n    if (props.defs && props.defs[0]) {\n      const wordObj = props.defs[0].defs[0]\n      let words = wordObj[Object.keys(wordObj)[0]]\n\n      //Fisher-Yates\n      for (let i = words.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i)\n        const temp = words[i]\n        words[i] = words[j]\n        words[j] = temp\n      }\n\n      words = words.slice(0, 3)\n      words.forEach((word: string, index: number) => {\n        similarDivs.push(<a\n          key={index}\n          className=\"similar\"\n          href={`https://translate.google.com/?sl=ja&tl=en&text=${word}&op=translate`}\n          rel=\"noreferrer\"\n          target=\"_blank\">{word + (index === words.length - 1 ? \"\" : \", \")}</a>)\n      })\n    }\n    setSimilar(similarDivs)\n  }, [])\n\n  return (\n    <div className=\"metadata\">\n      <div>Strength: {<span className=\"strength\">{(props.data.strength * 100).toFixed(2) + \"%\"}</span>\n        }\n      </div>\n      {similar.length ? <div>Similar: {similar}</div> : null}\n      <div>Lesson:\n        <a\n          className=\"lesson\"\n          href={`https://duolingo.com/skill/ja/${props.data.skill_url_title}/practice`}\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          {\" \" + props.data.skill}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default SlideEditor\n","/Users/feefs/Documents/ts-duo-cards/src/components/Edit.tsx",[],"/Users/feefs/Documents/ts-duo-cards/src/components/Practice.tsx",[],"/Users/feefs/Documents/ts-duo-cards/src/ts/curated.ts",[],"/Users/feefs/Documents/ts-duo-cards/src/ts/configs.ts",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"64","replacedBy":"68"},{"ruleId":"66","replacedBy":"69"},{"ruleId":"64","replacedBy":"70"},{"ruleId":"66","replacedBy":"71"},{"ruleId":"64","replacedBy":"72"},{"ruleId":"66","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":192,"column":6,"nodeType":"76","endLine":192,"endColumn":8,"suggestions":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],["78"],["79"],["78"],["79"],["78"],["79"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.defs'. Either include it or remove the dependency array.","ArrayExpression",["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [props.defs]",{"range":"83","text":"84"},[6096,6098],"[props.defs]"]